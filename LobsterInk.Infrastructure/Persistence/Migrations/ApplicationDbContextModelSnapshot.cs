// <auto-generated />
using LobsterInk.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LobsterInk.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LobsterInk.Domain.Entities.Adventure", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Adventures");
                });

            modelBuilder.Entity("LobsterInk.Domain.Entities.AdventureQuestion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdventureId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("ParentNavigationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.HasIndex("ParentNavigationId");

                    b.ToTable("AdventureQuestions");
                });

            modelBuilder.Entity("LobsterInk.Domain.Entities.UserAdventureQuestionHistory", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdventureQuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "AdventureQuestionId");

                    b.HasIndex("AdventureQuestionId");

                    b.ToTable("UserAdventureQuestionsHistory");
                });

            modelBuilder.Entity("LobsterInk.Domain.Entities.AdventureQuestion", b =>
                {
                    b.HasOne("LobsterInk.Domain.Entities.Adventure", "Adventure")
                        .WithMany("Questions")
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LobsterInk.Domain.Entities.AdventureQuestion", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentNavigationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Adventure");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("LobsterInk.Domain.Entities.UserAdventureQuestionHistory", b =>
                {
                    b.HasOne("LobsterInk.Domain.Entities.AdventureQuestion", "AdventureQuestion")
                        .WithMany("AdventureQuestionHistories")
                        .HasForeignKey("AdventureQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdventureQuestion");
                });

            modelBuilder.Entity("LobsterInk.Domain.Entities.Adventure", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("LobsterInk.Domain.Entities.AdventureQuestion", b =>
                {
                    b.Navigation("AdventureQuestionHistories");

                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
